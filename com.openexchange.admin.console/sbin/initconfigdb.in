#!/bin/bash
#
#
#   @copyright Copyright (c) OX Software GmbH, Germany <info@open-xchange.com>
#   @license AGPL-3.0
#
#   This code is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#   You should have received a copy of the GNU Affero General Public License
#   along with OX App Suite.  If not, see <https://www.gnu.org/licenses/agpl-3.0.txt>.
#
#   Any use of the work other than as authorized under this license or copyright law is prohibited.
#
#

OXFUNCTIONS=@oxfunctions@
ADMINCONF=@confDir@

test -f $OXFUNCTIONS || {
        echo "missing common shell functions file"
        exit 1
}

. $OXFUNCTIONS

# some defaults
CONFIGDB_USER=openexchange
CONFIGDB_USER_LONG=configdb-user
CONFIGDB_PASS=
CONFIGDB_PASS_LONG=configdb-pass
CONFIGDB_HOST=localhost
CONFIGDB_HOST_LONG=configdb-host
CONFIGDB_PORT=3306
CONFIGDB_PORT_LONG=configdb-port
CONFIGDB_DBNAME=configdb
CONFIGDB_DBNAME_LONG=configdb-dbname
MYSQL_ROOT_USER=root
MYSQL_ROOT_USER_LONG=mysql-root-user
MYSQL_ROOT_PASSWD=
MYSQL_ROOT_PASSWD_LONG=mysql-root-passwd

# https://jira.mariadb.org/browse/MDEV-14974
if [ "$CONFIGDB_HOST" == "localhost" ]; then
    MYSQL_CLIENT_PROTOCOL=${MYSQL_CLIENT_PROTOCOL:-SOCKET}
fi

ADDON_SQL=
ADDON_SQL_LONG=addon-sql

# default is NOT to create sql admin user
CREATEADMIN=
DLETETECONFIGDB=

MUSTOPTS="CONFIGDB_PASS"
LONGOPTS='$CONFIGDB_USER_LONG:,$CONFIGDB_PASS_LONG:,$CONFIGDB_HOST_LONG:,$CONFIGDB_PORT_LONG:,$CONFIGDB_DBNAME_LONG:,$ADDON_SQL_LONG:,$MYSQL_ROOT_USER_LONG:,$MYSQL_ROOT_PASSWD_LONG:'

usage() {
    echo
    echo "$0 currently knows the following parameters:"
    echo
    local lopts=$(echo $LONGOPTS | sed -e 's/[:,]/ /g')
    printf '%-30s | %s\n' "Parameter" "Default value"
    echo "------------------------------------------------------------"
    for opt in $lopts; do
	local rvar=${opt%_LONG}
	local default=$(eval echo $rvar)
	local lopt=$(eval echo $opt)
	#echo $opt $rvar $default $lopt
	printf '%-30s | %s\n' "--$lopt" $default
    done
    echo
    echo
    echo 'NOTE: use "-a" to create SQL admin user using GRANT command'
    echo '      use "-i" to automatically delete the configdb if exists'
    echo
    echo
cat<<EOF
Example:

  $0 --configdb-pass=secret
EOF
    echo
    exit 0
}

TEMP=$(POSIXLY_CORRECT=true getopt -o iap:h --long "$(eval echo $LONGOPTS),help" -- "$@")
eval set -- "$TEMP"

while true; do
    case "$1" in
	--$CONFIGDB_USER_LONG)
	    CONFIGDB_USER=$2
	    shift 2
	    ;;
	--$CONFIGDB_PASS_LONG)
	    CONFIGDB_PASS=$2
	    shift 2
	    ;;
	--$CONFIGDB_HOST_LONG)
	    CONFIGDB_HOST=$2
	    shift 2
	    ;;
	-p|--$CONFIGDB_PORT_LONG)
	    CONFIGDB_PORT=$2
	    shift 2
	    ;;
	--$CONFIGDB_DBNAME_LONG)
	    CONFIGDB_DBNAME=$2
	    shift 2
	    ;;
	--$MYSQL_ROOT_USER_LONG)
	    MYSQL_ROOT_USER=$2
	    shift 2
	    ;;
	--$MYSQL_ROOT_PASSWD_LONG)
	    MYSQL_ROOT_PASSWD=$2
	    shift 2
	    ;;
	--$ADDON_SQL_LONG)
	    ADDON_SQL=$2
	    shift 2
	    ;;
	-a)
	    CREATEADMIN=true
	    shift
	    ;;
	-i)
	    DLETETECONFIGDB=true
	    shift
	    ;;
	-h|--help)
	    usage
        exit 1
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    die "Internal error!"
	    exit 1
	    ;;
    esac
done

# generic parameter checking
for opt in $MUSTOPTS; do
    opt_var=$(eval echo \$$opt)
    opt_var_long=$(eval echo \$${opt}_LONG)
    opt_var_values=$(eval echo \$${opt}_VALUES)
    if [ -z "$opt_var" ]; then
	usage
	die "missing required option --$opt_var_long"
    fi
    if [ -n "$opt_var_values" ]; then
	found=
	for val in $opt_var_values; do
	    if [ "$val" == "$opt_var" ]; then
		found=$val
	    fi
	done
	if [ -z "$found" ]; then
	    die "\"$opt_var\" is not a valid option to --$opt_var_long"
	fi
    fi
done

# Check for existing database schemas on given database host
MYSQL_RESULT="$(mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT -u $CONFIGDB_USER -p"${CONFIGDB_PASS}" ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} -e "show databases;" -B 2>&1)"

# Check if result hints to missing MySQL user; e.g. "ERROR 1045 (28000): Access denied for user 'nogo'@'localhost' (using password: YES)"
#                                                   "ERROR 1698 (28000): Access denied for user 'openexchange'@'localhost'"
ACCESS_DENIED="false"
if [[ ${MYSQL_RESULT} == *"ERROR 1045"* ]] || [[ ${MYSQL_RESULT} == *"ERROR 1698"* ]] && [ "$DLETETECONFIGDB" != "true" ]; then
    ACCESS_DENIED="true"
fi

# Check if result starts with "ERROR"
if [[ ${MYSQL_RESULT} == ERROR* ]] && [ "$DLETETECONFIGDB" != "true" ] && [ "$ACCESS_DENIED" != "true" ]; then
    # 'mysql' command returned an error
    die "the database host $CONFIGDB_HOST is currently not reachable or wrong access parameters are specified. Therefore it cannot be checked if database $CONFIGDB_DBNAME already exists. Use the -i switch if you want to proceed (and automatically delete it) anyway"
fi

# As last resort check return code
if [ $? -ne 0 ] && [ "$DLETETECONFIGDB" != "true" ] && [ "$ACCESS_DENIED" != "true" ]; then
    # 'mysql' command returned an error
    die "the database host $CONFIGDB_HOST is currently not reachable or wrong access parameters are specified. Therefore it cannot be checked if database $CONFIGDB_DBNAME already exists. Use the -i switch if you want to proceed (and automatically delete it) anyway"
fi

if [ "$(echo "$MYSQL_RESULT" | grep ${CONFIGDB_DBNAME})" == ${CONFIGDB_DBNAME} ] && [ "$DLETETECONFIGDB" != "true" ]; then
    # Such a database schema already exists
	die "the database $CONFIGDB_DBNAME exists, use the -i switch if you want to automatically delete it"
fi

echo -n "initializing configdb from scratch..."

if [ -n "$CREATEADMIN" ]; then
    ROOTAUTH=
    if [ -n "$MYSQL_ROOT_PASSWD" ]; then
	ROOTAUTH="-u $MYSQL_ROOT_USER -p\"${MYSQL_ROOT_PASSWD}\""
    fi
    cat<<EOF | mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT $(eval echo $ROOTAUTH) ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} || die "unable to drop database (wrong or missing password for user root?)"
drop database if exists \`${CONFIGDB_DBNAME}\`;
EOF
    cat<<EOF | mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT $(eval echo $ROOTAUTH) ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} || die "unable to GRANT privileges"
GRANT CREATE, LOCK TABLES, REFERENCES, INDEX, DROP, DELETE, ALTER, SELECT, UPDATE, INSERT, CREATE TEMPORARY TABLES, SHOW VIEW, SHOW DATABASES ON *.* TO '$CONFIGDB_USER'@'%' IDENTIFIED BY '$CONFIGDB_PASS' WITH GRANT OPTION;
GRANT CREATE, LOCK TABLES, REFERENCES, INDEX, DROP, DELETE, ALTER, SELECT, UPDATE, INSERT, CREATE TEMPORARY TABLES, SHOW VIEW, SHOW DATABASES ON *.* TO '$CONFIGDB_USER'@'localhost' IDENTIFIED BY '$CONFIGDB_PASS' WITH GRANT OPTION;
create database \`${CONFIGDB_DBNAME}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
EOF
    mysqladmin -h $CONFIGDB_HOST -P $CONFIGDB_PORT $(eval echo $ROOTAUTH) ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} flush-privileges || die
else
    cat<<EOF | mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT -u $CONFIGDB_USER -p"${CONFIGDB_PASS}" ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} || die
drop database if exists \`${CONFIGDB_DBNAME}\`;
create database \`${CONFIGDB_DBNAME}\` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
EOF
fi

cat $ADMINCONF/mysql/configdb.sql \
    | mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT -u $CONFIGDB_USER -p"${CONFIGDB_PASS}" ${CONFIGDB_DBNAME} ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} || die
echo " done"

if [ -n "$ADDON_SQL" ]; then
    for sql in $ADDON_SQL; do
	if [ -f $ADMINCONF/mysql/$sql ]; then
	    echo "applying additional sql initialisation from $ADMINCONF/mysql/$sql"
	    cat $ADMINCONF/mysql/$sql \
		| mysql -h $CONFIGDB_HOST -P $CONFIGDB_PORT -u $CONFIGDB_USER \
		-p"${CONFIGDB_PASS}" ${CONFIGDB_DBNAME} ${MYSQL_CLIENT_PROTOCOL:+--protocol=$MYSQL_CLIENT_PROTOCOL} || die
	else
	    echo "$ADMINCONF/mysql/$sql not found"
	fi
    done
fi
