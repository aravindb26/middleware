{{- $globalContext := . -}}
{{- if not $globalContext.Values.update.enabled -}}
{{- $typedResources := (include "core-mw.typedResources" . | fromYaml) -}}
{{- $scaling := (include "core-mw.scaling" . | fromYaml) -}}
{{- range $typeName, $typeConfig := $scaling -}}
{{- $values := (include "core-mw.computeValuesFor" (dict "Context" $globalContext "Roles" $typeConfig.roles "TypeConfig" $typeConfig) | fromYaml) -}}
{{- $values := set $values "serviceAccountName" (include "core-mw.serviceAccountName" $globalContext) -}}
{{- $roleMap := (include "core-mw.roleMap" (dict "Roles" $typeConfig.roles)) | fromYaml -}}
{{- $controller := "Deployment" -}}
{{- $statefulSetServiceName := "" -}}
{{- range $role := $typeConfig.roles -}}
{{- if (get $globalContext.Values.roles $role) -}}
{{- if (eq "StatefulSet" (get (get $globalContext.Values.roles $role) "controller")) -}}
{{- $controller = "StatefulSet" -}}
{{- $statefulSetServiceName = (get (get $globalContext.Values.roles $role) "statefulSetServiceName") -}}
{{- end -}}
{{- end -}}
{{- end -}}
{{- $context := (dict "Context" $globalContext "Roles" $typeConfig.roles "TypeConfig" $typeConfig "TypeName" $typeName "Values" $values "TypedResources" $typedResources) -}}
apiVersion: apps/v1
{{- if eq $controller "StatefulSet" }}
kind: "StatefulSet"
{{- else }}
kind: "Deployment"
{{- end }}
metadata:
  name: {{ include "ox-common.names.fullname" $globalContext }}-{{ $typeName }}
  labels:
    {{- include "ox-common.labels.standard" $globalContext | nindent 4 }}
    {{ range $role := $typeConfig.roles -}}
    roles.middleware.open-xchange.com/{{ $role }}: "true"
    {{ end }}
spec:
  {{- if eq $controller "StatefulSet" }}
  serviceName: {{ include "ox-common.names.fullname" $globalContext }}-{{ $statefulSetServiceName | default $typeName }}
  {{- include "core-mw.statefulSetProperties" $globalContext | nindent 2 }}
  {{- end }}
  replicas: {{ $typeConfig.replicas }}
  selector:
    matchLabels:
      {{- include "ox-common.labels.matchLabels" $globalContext | nindent 6 }}
  {{- if $values.rolloutStrategy }}
  strategy:
    type: {{ $values.rolloutStrategy.type }}
  {{- if (and (eq $values.rolloutStrategy.type "RollingUpdate") $values.rolloutStrategy.rollingUpdate) }}
    rollingUpdate: {{ $values.rolloutStrategy.rollingUpdate | toYaml | nindent 6 }}
  {{- end }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- include "core-mw.podAnnotations" $values | nindent 8 }}
        checksum/allConfig: {{ include "core-mw.configChecksum" $context | quote }}
        checksum/commonEnv: {{ include "ox-common.appsuite.commonEnv" $globalContext | sha256sum }}
      labels:
        {{- include "ox-common.labels.podLabels" $globalContext | nindent 8 }}
        {{ range $role := $typeConfig.roles -}}
        roles.middleware.open-xchange.com/{{ $role }}: "true"
        {{ end }}
        {{- if (($values.istio).injection).enabled }}
        sidecar.istio.io/inject: "true"
        {{- end }}
        {{- if (($values.istio).compression).enabled }}
        ox.io/compression: "true"
        {{- end }}
    spec: {{- include "ox-common.pods.podSpec" (dict "podRoot" $values "global" $) | nindent 6 }}
      terminationGracePeriodSeconds: {{ $values.terminationGracePeriodSeconds }}
      initContainers:
        - name: init-middleware
          image: {{ include "ox-common.images.image" (dict "imageRoot" $values.image "global" $ "context" $globalContext) }}
          imagePullPolicy: {{ $values.image.pullPolicy }}
          command:
            - "/bin/bash"
            - "-c"
            - |
              {{ if (or $values.enableInitialization $values.enableDBConnectionCheck) }}
              echo -e "Checking for the availability of MySQL Server deployment"
              while ! nc -z -w 5 "${MYSQL_HOST}" "${MYSQL_PORT}"; do
                  printf "-"
              done
              echo -e "  >> MySQL Server is up & running"
              {{- end }}
              {{- if $values.javaOpts.debug.heapdump.enabled }}
              echo "Creating heapdump directory"
              mkdir -p "/heapdump/${POD_NAME}"
              {{- end }}
              {{- if $values.enableInitialization }}
              echo "Check whether configdb exists..."
              if mysql -h "${MYSQL_HOST}" -u "${MYSQL_USER}" -p"${MYSQL_PASSWORD}" configdb -e "SELECT 1"; then
                  echo "Skipping configdb initialization (configdb already exists)."
                  exit 0
              else
                  echo "Initializing configdb"
                  initconfigdb -a --configdb-user "${MYSQL_USER}" --configdb-pass "${MYSQL_PASSWORD}" \
                      --configdb-host "${MYSQL_HOST}" \
                      --configdb-port "${MYSQL_PORT}" \
                      --configdb-dbname "${MYSQL_DATABASE}" \
                      --mysql-root-passwd "${MYSQL_ROOT_PASSWORD}"
              fi
              ox_props set --property com.openexchange.hazelcast.network.join --value empty
              /entrypoint.sh /opt/open-xchange/sbin/open-xchange-cloud &
              while true; do
                  STATUS=$(curl -sLI -w '%{http_code}' http://localhost:8009/health -o /dev/null)
                  if [ $STATUS -eq 200 ]; then
                      echo "Middleware is up & running"
                      break
                  else
                      echo "Middleware health status: $STATUS"
                  fi
                  sleep 5
              done
              {{- end }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ $values.mysql.auth.rootPassword | quote }}
            - name: HZ_LITE_MEMBER
              value: "false"
            {{- include "core-mw.env" $context | nindent 12 }}
            {{- include "core-mw.env-variables" $context | nindent 12 }}
            {{- if not (empty $context.Values.javaOpts.memory.maxHeapSize) }}
            - name: JAVA_OPTS_MEMORY_MAXHEAP
              value: "-XX:MaxHeapSize={{ $context.Values.javaOpts.memory.maxHeapSize }}"
            {{- end }}
          envFrom:
            - secretRef:
                name: {{ include "core-mw.resourceName" (dict "DeploymentContext" $context "ResourceName" "mysql-secret") }}
            {{- include "core-mw.envFrom" $context | nindent 12 }}
          volumeMounts:
            {{- if $values.javaOpts.debug.heapdump.enabled }}
            - name: heapdump
              mountPath: /heapdump
            {{- end }}
            {{ include "core-mw.volumeMounts" $context | nindent 12 }}
      containers:
        - name: {{ $globalContext.Chart.Name }}
          image: {{ include "ox-common.images.image" (dict "imageRoot" $values.image "global" $ "context" $globalContext) }}
          imagePullPolicy: {{ $values.image.pullPolicy }}
          ports:
            - containerPort: 8009
              name: http
          {{- if $values.probe.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /live
              port: 8016
            {{- omit $values.probe.liveness "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if $values.probe.startup.enabled }}
          startupProbe:
            httpGet:
              path: /health
              port: 8009
            {{- omit $values.probe.startup "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if $values.probe.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /ready
              port: 8009
            {{- omit $values.probe.readiness "enabled" | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ $values.mysql.auth.rootPassword | quote }}
            {{- include "core-mw.env" $context | nindent 12 }}
            {{- include "core-mw.env-variables" $context | nindent 12 }}
            - name: HZ_LITE_MEMBER
            {{- if (get $roleMap "hazelcast-lite-member") }}
              value: "true"
            {{- else }}
              value: "false"
            {{- end }}
            {{- if $values.javaOpts.debug.heapdump.enabled }}
            - name: OX_JAVA_OPTS_DEBUG_HEAPDUMP_ENABLED
              value: "true"
            {{- end }}
            {{- if $values.javaOpts.debug.gcLogs.enabled }}
            - name: OX_JAVA_OPTS_DEBUG_GCLOGS_ENABLED
              value: "true"
            {{- end }}
            {{- if $values.remoteDebug.enabled }}
            - name: JAVA_OPTS_SERVER
              value: "-server -Djava.awt.headless=true -Xdebug -Xrunjdwp:transport=dt_socket,address={{ $values.remoteDebug.port }},server=y,suspend=n"
            {{- end }}
            {{- if not (empty $values.javaOpts.memory.maxHeapSize) }}
            - name: JAVA_OPTS_MEMORY_MAXHEAP
              value: "-XX:MaxHeapSize={{ $values.javaOpts.memory.maxHeapSize }}"
            {{- end }}
            {{- if not (empty $values.javaOpts.other) }}
            - name: JAVA_OPTS_OTHER
              value: "{{ $values.javaOpts.other }}"
            {{- end }}
            {{- if and $values.configuration.businessmobility.logging.debug.enabled (get $roleMap "businessmobility") }}
            - name: EAS_DEBUG
              value: "true"
            - name: EAS_LOG_PATH
              value: {{ trimSuffix "/" $values.configuration.businessmobility.logging.debug.logPath | default "/var/log/open-xchange" }}
            {{- end }}
          envFrom:
            {{- if and $values.enableInitialization (not $values.globalDBID) }}
            - configMapRef:
                name: {{ include "ox-common.names.fullname" $globalContext }}-demo
            {{- end }}
            - secretRef:
                name: {{ include "core-mw.resourceName" (dict "DeploymentContext" $context "ResourceName" "mysql-secret") }}
            {{- include "core-mw.envFrom" $context | nindent 12 }}
          resources:
            {{- toYaml $values.resources | nindent 12 }}
          volumeMounts:
            {{ include "core-mw.volumeMounts" $context | nindent 12 }}
            {{- if $values.javaOpts.debug.heapdump.enabled }}
            - name: heapdump
              mountPath: /heapdump
            {{- end }}
            {{- if $values.enableInitialization }}
            - name: oxguardpass
              mountPath: /opt/open-xchange/etc/oxguardpass
              subPath: oxguardpass
            {{- end }}
            {{- if (eq (include "ox-common.java.ssl.enabled" $globalContext) "true") }}
            - name: java-ssl-secrets
              mountPath: /opt/open-xchange/etc/security/
              readOnly: true
            {{- end }}
            {{- if $values.restricted.drive.enabled }}
            - name: drive-restricted-config
              mountPath: /opt/open-xchange/etc/pushClientConfig/drive-restricted-config.yaml
              readOnly: true
            {{- end }}
            {{- if $values.restricted.mobileApiFacade.enabled }}
            - name: mobile-api-facade-restricted-config
              mountPath: /opt/open-xchange/etc/pushClientConfig/mobile-api-facade-restricted-config.yaml
              readOnly: true
            {{- end }}
        {{ include "core-mw.containers" $context | nindent 8 }}
      volumes:
        {{ include "core-mw.volumes" $context | nindent 8 }}
        {{- if $values.javaOpts.debug.heapdump.enabled }}
        - name: heapdump
          {{- if $values.javaOpts.debug.heapdump.custom }}
          {{- toYaml $values.javaOpts.debug.heapdump.custom | nindent 10 }}
          {{- else }}
          hostPath:
            path: {{ $values.javaOpts.debug.heapdump.hostPath.dir }}
            type: Directory
          {{- end }}
        {{- end }}
        {{- if $values.enableInitialization }}
        - name: oxguardpass
          secret:
            secretName: {{ include "ox-common.names.fullname" $globalContext }}-guard-secret
            defaultMode: 0444
        {{- end }}
        {{- if (eq (include "ox-common.java.ssl.enabled" $globalContext) "true") }}
        - name: java-ssl-secrets
          secret:
            secretName: {{ include "ox-common.java.ssl.secretName" $globalContext }}
            items:
              - key: {{ include "ox-common.java.ssl.secret.keyStoreKey" $globalContext }}
                path: java-ssl.ks
              {{- if eq (include "ox-common.java.ssl.useTrustStore" $globalContext) "true" }}
              - key: {{ include "ox-common.java.ssl.secret.trustStoreKey" $globalContext }}
                path: java-ssl.ts
              {{- end }}
        {{- end }}
        - name: drive-restricted-config
          secret:
            secretName: drive-restricted-config
            optional: true
        - name: mobile-api-facade-restricted-config
          secret:
            secretName: mobile-api-facade-restricted-config
            optional: true
---
{{ end -}}
{{ end -}}
