
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.secondaryaccount.soap;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import javax.jws.WebService;
import com.openexchange.admin.rmi.OXSecondaryAccountInterface;
import com.openexchange.admin.rmi.dataobjects.EndpointSource;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchUserException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.Account;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.AccountData;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.AccountDataOnCreate;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.AccountDataUpdate;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.Context;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.Credentials;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.Group;
import com.openexchange.admin.soap.secondaryaccount.dataobjects.User;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:46:00.606+02:00
 * Generated source version: 2.6.0
 *
 */

@WebService(serviceName = "OXSecondaryAccountService", portName = "OXSecondaryAccountServiceHttpSoap12Endpoint", targetNamespace = "http://soap.admin.openexchange.com",
    // wsdlLocation = "null",
    endpointInterface = "com.openexchange.admin.soap.secondaryaccount.soap.OXSecondaryAccountServicePortType")

public class OXSecondaryAccountServicePortTypeImpl implements OXSecondaryAccountServicePortType {

    private final OXSecondaryAccountInterface accInterface;

    /**
     * Initializes a new {@link OXSecondaryAccountServicePortTypeImpl}.
     *
     * @param accInterface The secondary account interface to use
     */
    public OXSecondaryAccountServicePortTypeImpl(OXSecondaryAccountInterface accInterface) {
        super();
        this.accInterface = accInterface;
    }

    @Override
    public void create(Create parameters) throws RemoteException_Exception, StorageException_Exception, InvalidCredentialsException_Exception, NoSuchContextException_Exception, NoSuchUserException_Exception, InvalidDataException_Exception, DatabaseUpdateException_Exception {
        try {
            accInterface.create(soap2AccountDataOnCreate(parameters.getAccountDataOnCreate()), soap2Context(parameters.getContext()), soap2Users(parameters.getUsers()), soap2Groups(parameters.getGroups()), soap2Credentials(parameters.getAuth()));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.RemoteException fd = new com.openexchange.admin.soap.secondaryaccount.soap.RemoteException();
            com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException value = new com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException();
            value.setMessage(e.getMessage());
            fd.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), fd, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.StorageException fd = new com.openexchange.admin.soap.secondaryaccount.soap.StorageException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException();
            fd.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), fd, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException();
            fd.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException();
            fd.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException();
            fd.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), fd, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException();
            fd.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), fd, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException fd = new com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException();
            fd.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), fd, e);
        }
    }

    @Override
    public Boolean update(String primaryAddress, AccountDataUpdate accountDataUpdate, Context context, List<User> users, List<Group> groups, Credentials auth) throws RemoteException_Exception, StorageException_Exception, InvalidCredentialsException_Exception, NoSuchContextException_Exception, NoSuchUserException_Exception, InvalidDataException_Exception, DatabaseUpdateException_Exception {
        try {
            return Boolean.valueOf(accInterface.update(primaryAddress, soap2AccountData(accountDataUpdate), soap2Context(context), soap2Users(users), soap2Groups(groups), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.RemoteException fd = new com.openexchange.admin.soap.secondaryaccount.soap.RemoteException();
            com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException value = new com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException();
            value.setMessage(e.getMessage());
            fd.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), fd, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.StorageException fd = new com.openexchange.admin.soap.secondaryaccount.soap.StorageException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException();
            fd.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), fd, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException();
            fd.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException();
            fd.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException();
            fd.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), fd, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException();
            fd.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), fd, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException fd = new com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException();
            fd.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), fd, e);
        }
    }

    @Override
    public Boolean delete(String primaryAddress, Context context, java.util.List<User> users, java.util.List<Group> groups, Credentials auth) throws RemoteException_Exception, StorageException_Exception, InvalidCredentialsException_Exception, NoSuchContextException_Exception, NoSuchUserException_Exception, InvalidDataException_Exception, DatabaseUpdateException_Exception {
        try {
            return Boolean.valueOf(accInterface.delete(primaryAddress, soap2Context(context), soap2Users(users), soap2Groups(groups), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.RemoteException fd = new com.openexchange.admin.soap.secondaryaccount.soap.RemoteException();
            com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException value = new com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException();
            value.setMessage(e.getMessage());
            fd.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), fd, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.StorageException fd = new com.openexchange.admin.soap.secondaryaccount.soap.StorageException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException();
            fd.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), fd, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException();
            fd.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException();
            fd.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException();
            fd.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), fd, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException();
            fd.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), fd, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException fd = new com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException();
            fd.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), fd, e);
        }
    }

    @Override
    public List<Account> list(Context context, List<User> users, List<Group> groups, Credentials auth) throws RemoteException_Exception, StorageException_Exception, InvalidCredentialsException_Exception, NoSuchContextException_Exception, NoSuchUserException_Exception, InvalidDataException_Exception, DatabaseUpdateException_Exception {
        try {
            com.openexchange.admin.rmi.dataobjects.Account[] accounts = accInterface.list(soap2Context(context), soap2Users(users), soap2Groups(groups), soap2Credentials(auth));
            List<Account> soapAccounts = new ArrayList<Account>(accounts.length);
            for (com.openexchange.admin.rmi.dataobjects.Account account : accounts) {
                soapAccounts.add(account2Soap(account));
            }
            return soapAccounts;
        } catch (RemoteException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.RemoteException fd = new com.openexchange.admin.soap.secondaryaccount.soap.RemoteException();
            com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException value = new com.openexchange.admin.soap.secondaryaccount.rmi.RemoteException();
            value.setMessage(e.getMessage());
            fd.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), fd, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.StorageException fd = new com.openexchange.admin.soap.secondaryaccount.soap.StorageException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.StorageException();
            fd.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), fd, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidCredentialsException();
            fd.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchContextException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchContextException();
            fd.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), fd, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException fd = new com.openexchange.admin.soap.secondaryaccount.soap.NoSuchUserException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.NoSuchUserException();
            fd.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), fd, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException fd = new com.openexchange.admin.soap.secondaryaccount.soap.InvalidDataException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.InvalidDataException();
            fd.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), fd, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException fd = new com.openexchange.admin.soap.secondaryaccount.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.secondaryaccount.exceptions.DatabaseUpdateException();
            fd.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), fd, e);
        }
    }

    // -------------------------------------------------------------------------------------------------------------------------------------

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        final String login = soapCredentials.getLogin();
        if (null != login) {
            credentials.setLogin(login);
        }
        final String password = soapCredentials.getPassword();
        if (null != password) {
            credentials.setPassword(password);
        }
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.AccountData soap2AccountData(AccountData soapAccountData) {
        if (null == soapAccountData) {
            return null;
        }

        com.openexchange.admin.rmi.dataobjects.AccountData accountData = new com.openexchange.admin.rmi.dataobjects.AccountData();

        String tmp = soapAccountData.getLogin();
        if (tmp != null) {
            accountData.setLogin(tmp);
        }

        tmp = soapAccountData.getPassword();
        if (tmp != null) {
            accountData.setPassword(tmp);
        }

        tmp = soapAccountData.getName();
        if (tmp != null) {
            accountData.setName(tmp);
        }

        tmp = soapAccountData.getPrimaryAddress();
        if (tmp != null) {
            accountData.setPrimaryAddress(tmp);
        }

        tmp = soapAccountData.getPersonal();
        if (tmp != null) {
            accountData.setPersonal(tmp);
        }

        tmp = soapAccountData.getReplyTo();
        if (tmp != null) {
            accountData.setReplyTo(tmp);
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getMailServer();
        if (tmp != null) {
            accountData.setMailServer(tmp);
        }

        Integer itg = soapAccountData.getMailPort();
        if (itg != null) {
            accountData.setMailPort(itg.intValue());
        }

        tmp = soapAccountData.getMailProtocol();
        if (tmp != null) {
            accountData.setMailProtocol(tmp);
        }

        Boolean bol = soapAccountData.getMailSecure();
        if (bol != null) {
            accountData.setMailSecure(bol.booleanValue());
        }

        bol = soapAccountData.getMailStartTls();
        if (bol != null) {
            accountData.setMailStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getTransportLogin();
        if (tmp != null) {
            accountData.setTransportLogin(tmp);
        }

        tmp = soapAccountData.getTransportPassword();
        if (tmp != null) {
            accountData.setTransportPassword(tmp);
        }

        tmp = soapAccountData.getTransportServer();
        if (tmp != null) {
            accountData.setTransportServer(tmp);
        }

        itg = soapAccountData.getTransportPort();
        if (itg != null) {
            accountData.setTransportPort(itg.intValue());
        }

        tmp = soapAccountData.getTransportProtocol();
        if (tmp != null) {
            accountData.setTransportProtocol(tmp);
        }

        bol = soapAccountData.getTransportSecure();
        if (bol != null) {
            accountData.setTransportSecure(bol.booleanValue());
        }

        bol = soapAccountData.getTransportStartTls();
        if (bol != null) {
            accountData.setTransportStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getArchiveFullname();
        if (tmp != null) {
            accountData.setArchiveFullname(tmp);
        }

        tmp = soapAccountData.getDraftsFullname();
        if (tmp != null) {
            accountData.setDraftsFullname(tmp);
        }

        tmp = soapAccountData.getSentFullname();
        if (tmp != null) {
            accountData.setSentFullname(tmp);
        }

        tmp = soapAccountData.getSpamFullname();
        if (tmp != null) {
            accountData.setSpamFullname(tmp);
        }

        tmp = soapAccountData.getTrashFullname();
        if (tmp != null) {
            accountData.setTrashFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedSpamFullname();
        if (tmp != null) {
            accountData.setConfirmedSpamFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedHamFullname();
        if (tmp != null) {
            accountData.setConfirmedHamFullname(tmp);
        }

        return accountData;
    }

    private static com.openexchange.admin.rmi.dataobjects.AccountDataOnCreate soap2AccountDataOnCreate(AccountDataOnCreate soapAccountData) {
        if (null == soapAccountData) {
            return null;
        }

        com.openexchange.admin.rmi.dataobjects.AccountDataOnCreate accountData = new com.openexchange.admin.rmi.dataobjects.AccountDataOnCreate();

        String tmp = soapAccountData.getLogin();
        if (tmp != null) {
            accountData.setLogin(tmp);
        }

        tmp = soapAccountData.getPassword();
        if (tmp != null) {
            accountData.setPassword(tmp);
        }

        tmp = soapAccountData.getName();
        if (tmp != null) {
            accountData.setName(tmp);
        }

        tmp = soapAccountData.getPrimaryAddress();
        if (tmp != null) {
            accountData.setPrimaryAddress(tmp);
        }

        tmp = soapAccountData.getPersonal();
        if (tmp != null) {
            accountData.setPersonal(tmp);
        }

        tmp = soapAccountData.getReplyTo();
        if (tmp != null) {
            accountData.setReplyTo(tmp);
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getMailEndpointSource();
        if (tmp != null) {
            accountData.setMailEndpointSource(EndpointSource.endpointSourceFor(tmp.trim()));
        }

        tmp = soapAccountData.getMailServer();
        if (tmp != null) {
            accountData.setMailServer(tmp);
        }

        Integer itg = soapAccountData.getMailPort();
        if (itg != null) {
            accountData.setMailPort(itg.intValue());
        }

        tmp = soapAccountData.getMailProtocol();
        if (tmp != null) {
            accountData.setMailProtocol(tmp);
        }

        Boolean bol = soapAccountData.getMailSecure();
        if (bol != null) {
            accountData.setMailSecure(bol.booleanValue());
        }

        bol = soapAccountData.getMailStartTls();
        if (bol != null) {
            accountData.setMailStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getTransportLogin();
        if (tmp != null) {
            accountData.setTransportLogin(tmp);
        }

        tmp = soapAccountData.getTransportPassword();
        if (tmp != null) {
            accountData.setTransportPassword(tmp);
        }

        tmp = soapAccountData.getTransportEndpointSource();
        if (tmp != null) {
            accountData.setTransportEndpointSource(EndpointSource.endpointSourceFor(tmp.trim()));
        }

        tmp = soapAccountData.getTransportServer();
        if (tmp != null) {
            accountData.setTransportServer(tmp);
        }

        itg = soapAccountData.getTransportPort();
        if (itg != null) {
            accountData.setTransportPort(itg.intValue());
        }

        tmp = soapAccountData.getTransportProtocol();
        if (tmp != null) {
            accountData.setTransportProtocol(tmp);
        }

        bol = soapAccountData.getTransportSecure();
        if (bol != null) {
            accountData.setTransportSecure(bol.booleanValue());
        }

        bol = soapAccountData.getTransportStartTls();
        if (bol != null) {
            accountData.setTransportStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getArchiveFullname();
        if (tmp != null) {
            accountData.setArchiveFullname(tmp);
        }

        tmp = soapAccountData.getDraftsFullname();
        if (tmp != null) {
            accountData.setDraftsFullname(tmp);
        }

        tmp = soapAccountData.getSentFullname();
        if (tmp != null) {
            accountData.setSentFullname(tmp);
        }

        tmp = soapAccountData.getSpamFullname();
        if (tmp != null) {
            accountData.setSpamFullname(tmp);
        }

        tmp = soapAccountData.getTrashFullname();
        if (tmp != null) {
            accountData.setTrashFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedSpamFullname();
        if (tmp != null) {
            accountData.setConfirmedSpamFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedHamFullname();
        if (tmp != null) {
            accountData.setConfirmedHamFullname(tmp);
        }

        return accountData;
    }

    private static com.openexchange.admin.rmi.dataobjects.AccountData soap2AccountData(AccountDataUpdate soapAccountData) {
        if (null == soapAccountData) {
            return null;
        }

        com.openexchange.admin.rmi.dataobjects.AccountData accountData = new com.openexchange.admin.rmi.dataobjects.AccountData();

        String tmp = soapAccountData.getLogin();
        if (tmp != null) {
            accountData.setLogin(tmp);
        }

        tmp = soapAccountData.getPassword();
        if (tmp != null) {
            accountData.setPassword(tmp);
        }

        tmp = soapAccountData.getName();
        if (tmp != null) {
            accountData.setName(tmp);
        }

        tmp = soapAccountData.getPersonal();
        if (tmp != null) {
            accountData.setPersonal(tmp);
        }

        tmp = soapAccountData.getReplyTo();
        if (tmp != null) {
            accountData.setReplyTo(tmp);
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getMailServer();
        if (tmp != null) {
            accountData.setMailServer(tmp);
        }

        Integer itg = soapAccountData.getMailPort();
        if (itg != null) {
            accountData.setMailPort(itg.intValue());
        }

        tmp = soapAccountData.getMailProtocol();
        if (tmp != null) {
            accountData.setMailProtocol(tmp);
        }

        Boolean bol = soapAccountData.getMailSecure();
        if (bol != null) {
            accountData.setMailSecure(bol.booleanValue());
        }

        bol = soapAccountData.getMailStartTls();
        if (bol != null) {
            accountData.setMailStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getTransportLogin();
        if (tmp != null) {
            accountData.setTransportLogin(tmp);
        }

        tmp = soapAccountData.getTransportPassword();
        if (tmp != null) {
            accountData.setTransportPassword(tmp);
        }

        tmp = soapAccountData.getTransportServer();
        if (tmp != null) {
            accountData.setTransportServer(tmp);
        }

        itg = soapAccountData.getTransportPort();
        if (itg != null) {
            accountData.setTransportPort(itg.intValue());
        }

        tmp = soapAccountData.getTransportProtocol();
        if (tmp != null) {
            accountData.setTransportProtocol(tmp);
        }

        bol = soapAccountData.getTransportSecure();
        if (bol != null) {
            accountData.setTransportSecure(bol.booleanValue());
        }

        bol = soapAccountData.getTransportStartTls();
        if (bol != null) {
            accountData.setTransportStartTls(bol.booleanValue());
        }

        // --------------------------------------------------------------------

        tmp = soapAccountData.getArchiveFullname();
        if (tmp != null) {
            accountData.setArchiveFullname(tmp);
        }

        tmp = soapAccountData.getDraftsFullname();
        if (tmp != null) {
            accountData.setDraftsFullname(tmp);
        }

        tmp = soapAccountData.getSentFullname();
        if (tmp != null) {
            accountData.setSentFullname(tmp);
        }

        tmp = soapAccountData.getSpamFullname();
        if (tmp != null) {
            accountData.setSpamFullname(tmp);
        }

        tmp = soapAccountData.getTrashFullname();
        if (tmp != null) {
            accountData.setTrashFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedSpamFullname();
        if (tmp != null) {
            accountData.setConfirmedSpamFullname(tmp);
        }

        tmp = soapAccountData.getConfirmedHamFullname();
        if (tmp != null) {
            accountData.setConfirmedHamFullname(tmp);
        }

        return accountData;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(Context soapContext) {
        if (null == soapContext) {
            return null;
        }


        Integer itg = soapContext.getId();
        if (itg != null) {
            com.openexchange.admin.rmi.dataobjects.Context context = new com.openexchange.admin.rmi.dataobjects.Context();
            context.setId(itg);
            return context;
        }

        return null;
    }

    private static com.openexchange.admin.rmi.dataobjects.User[] soap2Users(java.util.List<User> soapUsers) {
        if (null == soapUsers || soapUsers.isEmpty()) {
            return null;
        }

        java.util.List<com.openexchange.admin.rmi.dataobjects.User> users = new java.util.ArrayList<com.openexchange.admin.rmi.dataobjects.User>(soapUsers.size());
        for (User soapUser : soapUsers) {
            com.openexchange.admin.rmi.dataobjects.User user = soap2User(soapUser);
            if (user != null) {
                users.add(user);
            }
        }
        return users.isEmpty() ? null : users.toArray(new com.openexchange.admin.rmi.dataobjects.User[users.size()]);
    }

    private static com.openexchange.admin.rmi.dataobjects.User soap2User(final User soapUser) {
        if (null == soapUser) {
            return null;
        }

        Integer itg = soapUser.getId();
        if (itg != null) {
            com.openexchange.admin.rmi.dataobjects.User user = new com.openexchange.admin.rmi.dataobjects.User();
            user.setId(itg);
            return user;
        }

        return null;
    }

    private static com.openexchange.admin.rmi.dataobjects.Group[] soap2Groups(java.util.List<Group> soapGroups) {
        if (null == soapGroups || soapGroups.isEmpty()) {
            return null;
        }

        java.util.List<com.openexchange.admin.rmi.dataobjects.Group> groups = new java.util.ArrayList<com.openexchange.admin.rmi.dataobjects.Group>(soapGroups.size());
        for (Group soapGroup : soapGroups) {
            com.openexchange.admin.rmi.dataobjects.Group group = soap2Group(soapGroup);
            if (group != null) {
                groups.add(group);
            }
        }
        return groups.isEmpty() ? null : groups.toArray(new com.openexchange.admin.rmi.dataobjects.Group[groups.size()]);
    }

    private static com.openexchange.admin.rmi.dataobjects.Group soap2Group(Group soapGroup) {
        if (null == soapGroup) {
            return null;
        }


        Integer itg = soapGroup.getId();
        if (itg != null) {
            com.openexchange.admin.rmi.dataobjects.Group group = new com.openexchange.admin.rmi.dataobjects.Group();
            group.setId(itg);
            return group;
        }

        return null;
    }

    private static Account account2Soap(com.openexchange.admin.rmi.dataobjects.Account account) {
        if (null == account) {
            return null;
        }

        Account soapAccount = new Account();

        Integer itg = account.getContextId();
        if (itg != null) {
            soapAccount.setContextId(itg);
        }

        itg = account.getUserId();
        if (itg != null) {
            soapAccount.setUserId(itg);
        }

        itg = account.getId();
        if (itg != null) {
            soapAccount.setId(itg);
        }

        String tmp = account.getLogin();
        if (tmp != null) {
            soapAccount.setLogin(tmp);
        }

        tmp = account.getPassword();
        if (tmp != null) {
            soapAccount.setPassword(tmp);
        }

        tmp = account.getName();
        if (tmp != null) {
            soapAccount.setName(tmp);
        }

        tmp = account.getPrimaryAddress();
        if (tmp != null) {
            soapAccount.setPrimaryAddress(tmp);
        }

        tmp = account.getPersonal();
        if (tmp != null) {
            soapAccount.setPersonal(tmp);
        }

        tmp = account.getReplyTo();
        if (tmp != null) {
            soapAccount.setReplyTo(tmp);
        }

        // --------------------------------------------------------------------

        tmp = account.getMailServer();
        if (tmp != null) {
            soapAccount.setMailServer(tmp);
        }

        int i = account.getMailPort();
        if (i > 0) {
            soapAccount.setMailPort(Integer.valueOf(i));
        }

        tmp = account.getMailProtocol();
        if (tmp != null) {
            soapAccount.setMailProtocol(tmp);
        }

        boolean bol = account.isMailSecure();
        soapAccount.setMailSecure(Boolean.valueOf(bol));

        bol = account.isMailStartTls();
        soapAccount.setMailStartTls(Boolean.valueOf(bol));

        // --------------------------------------------------------------------

        tmp = account.getTransportLogin();
        if (tmp != null) {
            soapAccount.setTransportLogin(tmp);
        }

        tmp = account.getTransportPassword();
        if (tmp != null) {
            soapAccount.setTransportPassword(tmp);
        }

        tmp = account.getTransportServer();
        if (tmp != null) {
            soapAccount.setTransportServer(tmp);
        }

        i = account.getTransportPort();
        if (i > 0) {
            soapAccount.setTransportPort(Integer.valueOf(i));
        }

        tmp = account.getTransportProtocol();
        if (tmp != null) {
            soapAccount.setTransportProtocol(tmp);
        }

        bol = account.isTransportSecure();
        soapAccount.setTransportSecure(Boolean.valueOf(bol));

        bol = account.isTransportStartTls();
        soapAccount.setTransportStartTls(Boolean.valueOf(bol));

        // --------------------------------------------------------------------

        tmp = account.getArchiveFullname();
        if (tmp != null) {
            soapAccount.setArchiveFullname(tmp);
        }

        tmp = account.getDraftsFullname();
        if (tmp != null) {
            soapAccount.setDraftsFullname(tmp);
        }

        tmp = account.getSentFullname();
        if (tmp != null) {
            soapAccount.setSentFullname(tmp);
        }

        tmp = account.getSpamFullname();
        if (tmp != null) {
            soapAccount.setSpamFullname(tmp);
        }

        tmp = account.getTrashFullname();
        if (tmp != null) {
            soapAccount.setTrashFullname(tmp);
        }

        tmp = account.getConfirmedSpamFullname();
        if (tmp != null) {
            soapAccount.setConfirmedSpamFullname(tmp);
        }

        tmp = account.getConfirmedHamFullname();
        if (tmp != null) {
            soapAccount.setConfirmedHamFullname(tmp);
        }

        return soapAccount;
    }

}
